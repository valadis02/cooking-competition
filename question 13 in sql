-- Modified selected_chefs table
CREATE TABLE selected_chefs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    episode INT,
    chef_id INT,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    contact_number VARCHAR(255),
    date_of_birth DATE,
    age INT,
    years_of_experience INT,
    expertise VARCHAR(255),
    cuisine_id INT,
    training_level INT -- Changed to INT for numeric operations
);

-- Low_train_episode table definition
CREATE TABLE low_train_episode (
    id INT AUTO_INCREMENT PRIMARY KEY,
    episode INT,
    training_sum INT
);

DELIMITER $$

CREATE TRIGGER trg_after_selected_chef_insert
AFTER INSERT ON selected_chefs
FOR EACH ROW
BEGIN
    DECLARE chef_count INT;
    DECLARE chef_sum INT;

    -- Count the number of chefs for the current episode
    SELECT COUNT(*) INTO chef_count
    FROM selected_chefs
    WHERE episode = NEW.episode;

    -- Check if the count of chefs for the current episode is a multiple of 10
    IF MOD(chef_count, 10) = 0 THEN
        -- Calculate the sum of training levels for the last 10 chefs in the current episode
        SELECT SUM(training_level) INTO chef_sum
        FROM (
            SELECT training_level
            FROM selected_chefs
            WHERE episode = NEW.episode
            ORDER BY id DESC
            LIMIT 10
        ) AS limited_chefs;

        -- Check if an entry for the current episode already exists in low_train_episode
        IF (SELECT COUNT(*) FROM low_train_episode WHERE episode = NEW.episode) = 0 THEN
            -- Insert the result into the low_train_episode table
            INSERT INTO low_train_episode (episode, training_sum)
            VALUES (NEW.episode, IFNULL(chef_sum, 0));
        ELSE
            -- Insert a new row with the episode and new sum
            INSERT INTO low_train_episode (episode, training_sum)
            VALUES (NEW.episode, IFNULL(chef_sum, 0));
        END IF;
    END IF;
END$$

DELIMITER ;



CREATE TABLE low_train_episode2 (
    id INT AUTO_INCREMENT PRIMARY KEY,
    training_sum INT
);

CREATE TABLE low_train_episode3 (
    id INT AUTO_INCREMENT PRIMARY KEY,
    training_sum INT
);

DELIMITER $$

CREATE TRIGGER trg_after_judge_insert
AFTER INSERT ON judges
FOR EACH ROW
BEGIN
    DECLARE judge_count INT;
    DECLARE training_sum INT;

    -- Count the number of judges
    SELECT COUNT(*) INTO judge_count
    FROM judges;

    -- Check if the count of judges is a multiple of 3
    IF MOD(judge_count, 3) = 0 THEN
        -- Calculate the sum of training levels for the last 3 judges
        SELECT SUM(c.training_level) INTO training_sum
        FROM (
            SELECT j.first_name
            FROM judges j
            ORDER BY j.judge_id DESC
            LIMIT 3
        ) AS last_judges
        JOIN chefs c ON last_judges.first_name = c.first_name;

        -- Insert the result into the low_train_episode2 table
        INSERT INTO low_train_episode2 (training_sum)
        VALUES (IFNULL(training_sum, 0));
    END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER trg_after_insert_low_train_episode2
AFTER INSERT ON low_train_episode2
FOR EACH ROW
BEGIN
    DECLARE training_sum1 INT;
    DECLARE training_sum2 INT;

    -- Get the training_sum from low_train_episode for the corresponding id
    SELECT training_sum INTO training_sum1
    FROM low_train_episode
    WHERE id = NEW.id
    LIMIT 1;

    -- Get the training_sum from low_train_episode2 for the corresponding id
    SELECT training_sum INTO training_sum2
    FROM low_train_episode2
    WHERE id = NEW.id
    LIMIT 1;

    -- Insert or update the summed training_sum into low_train_episode3
    IF (SELECT COUNT(*) FROM low_train_episode3 WHERE id = NEW.id) = 0 THEN
        INSERT INTO low_train_episode3 (id, training_sum)
        VALUES (NEW.id, IFNULL(training_sum1, 0) + IFNULL(training_sum2, 0));
    ELSE
        UPDATE low_train_episode3
        SET training_sum = IFNULL(training_sum1, 0) + IFNULL(training_sum2, 0)
        WHERE id = NEW.id;
    END IF;
END$$

DELIMITER ;

CREATE TABLE the_lowest_trained_episode (
    id INT AUTO_INCREMENT PRIMARY KEY,
    episode_id INT,
    training_level INT
);

DELIMITER $$

CREATE TRIGGER trg_after_insert_low_train_episode3
AFTER INSERT ON low_train_episode3
FOR EACH ROW
BEGIN
    DECLARE lowest_episode_id INT;
    DECLARE lowest_training_sum INT;

    -- Find the episode with the lowest training sum
    SELECT id, training_sum
    INTO lowest_episode_id, lowest_training_sum
    FROM low_train_episode3
    ORDER BY training_sum ASC
    LIMIT 1;

    -- Update the_lowest_trained_episode table
    IF (SELECT COUNT(*) FROM the_lowest_trained_episode) = 0 THEN
        -- If the table is empty, insert the first row
        INSERT INTO the_lowest_trained_episode (episode_id, training_level)
        VALUES (lowest_episode_id, lowest_training_sum);
    ELSE
        -- Update the existing row
        UPDATE the_lowest_trained_episode
        SET episode_id = lowest_episode_id, training_level = lowest_training_sum
        WHERE id = 1;
    END IF;
END$$

DELIMITER ;


