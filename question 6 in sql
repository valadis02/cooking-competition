CREATE TABLE FoundLabels (
    label_id INT PRIMARY KEY,
    name VARCHAR(255),
    description TEXT,
    count INT DEFAULT 0
);

ALTER TABLE labels
ADD COLUMN description TEXT;

INSERT INTO FoundLabels (label_id, name, description, count)
SELECT l.label_id, l.name, l.description, 0
FROM Labels l
ON DUPLICATE KEY UPDATE count = count;

DELIMITER //

CREATE TRIGGER update_found_labels
AFTER INSERT ON Selected_Recipes
FOR EACH ROW
BEGIN
    -- Update the count of the labels in FoundLabels
    UPDATE FoundLabels fl
    JOIN (
        SELECT rl.label_id
        FROM RecipeLabels rl
        JOIN Recipes r ON rl.recipe_id = r.recipe_id
        WHERE r.recipe_name = NEW.recipe_name
    ) AS temp ON fl.label_id = temp.label_id
    SET fl.count = fl.count + 1;
END//

DELIMITER ;

CREATE TABLE top_3_labels (
    label_id1 INT,
    label_id2 INT,
    total_count INT,
    PRIMARY KEY (label_id1, label_id2),
    FOREIGN KEY (label_id1) REFERENCES Labels(label_id),
    FOREIGN KEY (label_id2) REFERENCES Labels(label_id)
);

DELIMITER //

CREATE TRIGGER update_top_3_labels
AFTER INSERT ON Selected_Recipes
FOR EACH ROW
BEGIN
    -- Refresh the top_3_labels table
    DELETE FROM top_3_labels;

    INSERT INTO top_3_labels (label_id1, label_id2, total_count)
    SELECT 
        fl1.label_id AS label_id1,
        fl2.label_id AS label_id2,
        (fl1.count + fl2.count) AS total_count
    FROM 
        FoundLabels fl1
    JOIN 
        FoundLabels fl2 ON fl1.label_id < fl2.label_id
    ORDER BY 
        total_count DESC
    LIMIT 3;
END//

DELIMITER ;

-- Προσθήκη index στο πεδίο count στον πίνακα FoundLabels
CREATE INDEX idx_count ON FoundLabels (count);

-- Προσθήκη index στα πεδία recipe_id και label_id στον πίνακα RecipeLabels
CREATE INDEX idx_recipe_id ON RecipeLabels (recipe_id);
CREATE INDEX idx_label_id ON RecipeLabels (label_id);

-- Προσθήκη index στο πεδίο name στον πίνακα Recipes
CREATE INDEX idx_name ON Recipes (name);

EXPLAIN
SELECT 
    fl1.label_id AS label_id1,
    fl2.label_id AS label_id2,
    (fl1.count + fl2.count) AS total_count
FROM 
    FoundLabels fl1
JOIN 
    FoundLabels fl2 ON fl1.label_id < fl2.label_id
ORDER BY 
    total_count DESC
LIMIT 3;


EXPLAIN
SELECT 
    fl1.label_id AS label_id1,
    fl2.label_id AS label_id2,
    (fl1.count + fl2.count) AS total_count
FROM 
    FoundLabels fl1 FORCE INDEX (idx_count)
JOIN 
    FoundLabels fl2 FORCE INDEX (idx_count) ON fl1.label_id < fl2.label_id
ORDER BY 
    total_count DESC
LIMIT 3;

EXPLAIN
SELECT 
    fl1.label_id AS label_id1,
    fl2.label_id AS label_id2,
    (fl1.count + fl2.count) AS total_count
FROM 
    FoundLabels fl1
JOIN 
    FoundLabels fl2 ON fl1.label_id < fl2.label_id
ORDER BY 
    total_count DESC
LIMIT 3;


EXPLAIN
SELECT 
    fl1.label_id AS label_id1,
    fl2.label_id AS label_id2,
    (fl1.count + fl2.count) AS total_count
FROM 
    FoundLabels fl1 FORCE INDEX (idx_count)
JOIN 
    FoundLabels fl2 FORCE INDEX (idx_count) ON fl1.label_id < fl2.label_id
ORDER BY 
    total_count DESC
LIMIT 3;
